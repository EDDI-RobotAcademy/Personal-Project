
bin/Debug/ddd_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080012e  0080012e  000008b6  2**0
                  ALLOC
  3 .stab         00000d5c  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f6e  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002582  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000316a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  9e:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LED_Toggle>:
#include "usart_printf.h"

#define F_CPU       16000000L

void LED_Toggle(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	6c 97       	sbiw	r28, 0x1c	; 28
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    PORTB = 0x00;
  ba:	85 e2       	ldi	r24, 0x25	; 37
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	aa ef       	ldi	r26, 0xFA	; 250
  c8:	b3 e4       	ldi	r27, 0x43	; 67
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	4a e7       	ldi	r20, 0x7A	; 122
  d8:	55 e4       	ldi	r21, 0x45	; 69
  da:	69 81       	ldd	r22, Y+1	; 0x01
  dc:	7a 81       	ldd	r23, Y+2	; 0x02
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	9c 81       	ldd	r25, Y+4	; 0x04
  e2:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
  e6:	dc 01       	movw	r26, r24
  e8:	cb 01       	movw	r24, r22
  ea:	8b 8b       	std	Y+19, r24	; 0x13
  ec:	9c 8b       	std	Y+20, r25	; 0x14
  ee:	ad 8b       	std	Y+21, r26	; 0x15
  f0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	40 e8       	ldi	r20, 0x80	; 128
  f8:	5f e3       	ldi	r21, 0x3F	; 63
  fa:	6b 89       	ldd	r22, Y+19	; 0x13
  fc:	7c 89       	ldd	r23, Y+20	; 0x14
  fe:	8d 89       	ldd	r24, Y+21	; 0x15
 100:	9e 89       	ldd	r25, Y+22	; 0x16
 102:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 106:	88 23       	and	r24, r24
 108:	2c f4       	brge	.+10     	; 0x114 <LED_Toggle+0x6e>
		__ticks = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	98 8f       	std	Y+24, r25	; 0x18
 110:	8f 8b       	std	Y+23, r24	; 0x17
 112:	3f c0       	rjmp	.+126    	; 0x192 <LED_Toggle+0xec>
	else if (__tmp > 65535)
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	3f ef       	ldi	r19, 0xFF	; 255
 118:	4f e7       	ldi	r20, 0x7F	; 127
 11a:	57 e4       	ldi	r21, 0x47	; 71
 11c:	6b 89       	ldd	r22, Y+19	; 0x13
 11e:	7c 89       	ldd	r23, Y+20	; 0x14
 120:	8d 89       	ldd	r24, Y+21	; 0x15
 122:	9e 89       	ldd	r25, Y+22	; 0x16
 124:	0e 94 2e 03 	call	0x65c	; 0x65c <__gesf2>
 128:	18 16       	cp	r1, r24
 12a:	4c f5       	brge	.+82     	; 0x17e <LED_Toggle+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e2       	ldi	r20, 0x20	; 32
 132:	51 e4       	ldi	r21, 0x41	; 65
 134:	69 81       	ldd	r22, Y+1	; 0x01
 136:	7a 81       	ldd	r23, Y+2	; 0x02
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	9c 81       	ldd	r25, Y+4	; 0x04
 13c:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 140:	dc 01       	movw	r26, r24
 142:	cb 01       	movw	r24, r22
 144:	bc 01       	movw	r22, r24
 146:	cd 01       	movw	r24, r26
 148:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	98 8f       	std	Y+24, r25	; 0x18
 152:	8f 8b       	std	Y+23, r24	; 0x17
 154:	0f c0       	rjmp	.+30     	; 0x174 <LED_Toggle+0xce>
 156:	80 e9       	ldi	r24, 0x90	; 144
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	9a 8f       	std	Y+26, r25	; 0x1a
 15c:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	89 8d       	ldd	r24, Y+25	; 0x19
 160:	9a 8d       	ldd	r25, Y+26	; 0x1a
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LED_Toggle+0xbc>
 166:	9a 8f       	std	Y+26, r25	; 0x1a
 168:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	8f 89       	ldd	r24, Y+23	; 0x17
 16c:	98 8d       	ldd	r25, Y+24	; 0x18
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	98 8f       	std	Y+24, r25	; 0x18
 172:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 174:	8f 89       	ldd	r24, Y+23	; 0x17
 176:	98 8d       	ldd	r25, Y+24	; 0x18
 178:	89 2b       	or	r24, r25
 17a:	69 f7       	brne	.-38     	; 0x156 <LED_Toggle+0xb0>
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <LED_Toggle+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 17e:	6b 89       	ldd	r22, Y+19	; 0x13
 180:	7c 89       	ldd	r23, Y+20	; 0x14
 182:	8d 89       	ldd	r24, Y+21	; 0x15
 184:	9e 89       	ldd	r25, Y+22	; 0x16
 186:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	98 8f       	std	Y+24, r25	; 0x18
 190:	8f 8b       	std	Y+23, r24	; 0x17
 192:	8f 89       	ldd	r24, Y+23	; 0x17
 194:	98 8d       	ldd	r25, Y+24	; 0x18
 196:	9c 8f       	std	Y+28, r25	; 0x1c
 198:	8b 8f       	std	Y+27, r24	; 0x1b
 19a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 19c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LED_Toggle+0xf8>
 1a2:	9c 8f       	std	Y+28, r25	; 0x1c
 1a4:	8b 8f       	std	Y+27, r24	; 0x1b
    _delay_ms(500);
    PORTB = 0x20;
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	20 e2       	ldi	r18, 0x20	; 32
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	aa ef       	ldi	r26, 0xFA	; 250
 1b6:	b3 e4       	ldi	r27, 0x43	; 67
 1b8:	8d 83       	std	Y+5, r24	; 0x05
 1ba:	9e 83       	std	Y+6, r25	; 0x06
 1bc:	af 83       	std	Y+7, r26	; 0x07
 1be:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	4a e7       	ldi	r20, 0x7A	; 122
 1c6:	55 e4       	ldi	r21, 0x45	; 69
 1c8:	6d 81       	ldd	r22, Y+5	; 0x05
 1ca:	7e 81       	ldd	r23, Y+6	; 0x06
 1cc:	8f 81       	ldd	r24, Y+7	; 0x07
 1ce:	98 85       	ldd	r25, Y+8	; 0x08
 1d0:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	89 87       	std	Y+9, r24	; 0x09
 1da:	9a 87       	std	Y+10, r25	; 0x0a
 1dc:	ab 87       	std	Y+11, r26	; 0x0b
 1de:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e8       	ldi	r20, 0x80	; 128
 1e6:	5f e3       	ldi	r21, 0x3F	; 63
 1e8:	69 85       	ldd	r22, Y+9	; 0x09
 1ea:	7a 85       	ldd	r23, Y+10	; 0x0a
 1ec:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ee:	9c 85       	ldd	r25, Y+12	; 0x0c
 1f0:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 1f4:	88 23       	and	r24, r24
 1f6:	2c f4       	brge	.+10     	; 0x202 <LED_Toggle+0x15c>
		__ticks = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	9e 87       	std	Y+14, r25	; 0x0e
 1fe:	8d 87       	std	Y+13, r24	; 0x0d
 200:	3f c0       	rjmp	.+126    	; 0x280 <LED_Toggle+0x1da>
	else if (__tmp > 65535)
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	3f ef       	ldi	r19, 0xFF	; 255
 206:	4f e7       	ldi	r20, 0x7F	; 127
 208:	57 e4       	ldi	r21, 0x47	; 71
 20a:	69 85       	ldd	r22, Y+9	; 0x09
 20c:	7a 85       	ldd	r23, Y+10	; 0x0a
 20e:	8b 85       	ldd	r24, Y+11	; 0x0b
 210:	9c 85       	ldd	r25, Y+12	; 0x0c
 212:	0e 94 2e 03 	call	0x65c	; 0x65c <__gesf2>
 216:	18 16       	cp	r1, r24
 218:	4c f5       	brge	.+82     	; 0x26c <LED_Toggle+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e2       	ldi	r20, 0x20	; 32
 220:	51 e4       	ldi	r21, 0x41	; 65
 222:	6d 81       	ldd	r22, Y+5	; 0x05
 224:	7e 81       	ldd	r23, Y+6	; 0x06
 226:	8f 81       	ldd	r24, Y+7	; 0x07
 228:	98 85       	ldd	r25, Y+8	; 0x08
 22a:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 22e:	dc 01       	movw	r26, r24
 230:	cb 01       	movw	r24, r22
 232:	bc 01       	movw	r22, r24
 234:	cd 01       	movw	r24, r26
 236:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 23a:	dc 01       	movw	r26, r24
 23c:	cb 01       	movw	r24, r22
 23e:	9e 87       	std	Y+14, r25	; 0x0e
 240:	8d 87       	std	Y+13, r24	; 0x0d
 242:	0f c0       	rjmp	.+30     	; 0x262 <LED_Toggle+0x1bc>
 244:	80 e9       	ldi	r24, 0x90	; 144
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	98 8b       	std	Y+16, r25	; 0x10
 24a:	8f 87       	std	Y+15, r24	; 0x0f
 24c:	8f 85       	ldd	r24, Y+15	; 0x0f
 24e:	98 89       	ldd	r25, Y+16	; 0x10
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LED_Toggle+0x1aa>
 254:	98 8b       	std	Y+16, r25	; 0x10
 256:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 258:	8d 85       	ldd	r24, Y+13	; 0x0d
 25a:	9e 85       	ldd	r25, Y+14	; 0x0e
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	9e 87       	std	Y+14, r25	; 0x0e
 260:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 262:	8d 85       	ldd	r24, Y+13	; 0x0d
 264:	9e 85       	ldd	r25, Y+14	; 0x0e
 266:	89 2b       	or	r24, r25
 268:	69 f7       	brne	.-38     	; 0x244 <LED_Toggle+0x19e>
    _delay_ms(500);
}
 26a:	14 c0       	rjmp	.+40     	; 0x294 <LED_Toggle+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 26c:	69 85       	ldd	r22, Y+9	; 0x09
 26e:	7a 85       	ldd	r23, Y+10	; 0x0a
 270:	8b 85       	ldd	r24, Y+11	; 0x0b
 272:	9c 85       	ldd	r25, Y+12	; 0x0c
 274:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	9e 87       	std	Y+14, r25	; 0x0e
 27e:	8d 87       	std	Y+13, r24	; 0x0d
 280:	8d 85       	ldd	r24, Y+13	; 0x0d
 282:	9e 85       	ldd	r25, Y+14	; 0x0e
 284:	9a 8b       	std	Y+18, r25	; 0x12
 286:	89 8b       	std	Y+17, r24	; 0x11
 288:	89 89       	ldd	r24, Y+17	; 0x11
 28a:	9a 89       	ldd	r25, Y+18	; 0x12
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LED_Toggle+0x1e6>
 290:	9a 8b       	std	Y+18, r25	; 0x12
 292:	89 8b       	std	Y+17, r24	; 0x11
 294:	00 00       	nop
 296:	6c 96       	adiw	r28, 0x1c	; 28
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <main>:

int main(void)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	6c 97       	sbiw	r28, 0x1c	; 28
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61

    // Insert code
    DDRB = 0x20;
 2bc:	84 e2       	ldi	r24, 0x24	; 36
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	20 e2       	ldi	r18, 0x20	; 32
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18

    usart_initialize();
 2c6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <usart_initialize>
	stdout = &uart_output;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x3>
 2d2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end+0x2>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	a0 e2       	ldi	r26, 0x20	; 32
 2dc:	b1 e4       	ldi	r27, 0x41	; 65
 2de:	8d 83       	std	Y+5, r24	; 0x05
 2e0:	9e 83       	std	Y+6, r25	; 0x06
 2e2:	af 83       	std	Y+7, r26	; 0x07
 2e4:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	4a e7       	ldi	r20, 0x7A	; 122
 2ec:	55 e4       	ldi	r21, 0x45	; 69
 2ee:	6d 81       	ldd	r22, Y+5	; 0x05
 2f0:	7e 81       	ldd	r23, Y+6	; 0x06
 2f2:	8f 81       	ldd	r24, Y+7	; 0x07
 2f4:	98 85       	ldd	r25, Y+8	; 0x08
 2f6:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 2fa:	dc 01       	movw	r26, r24
 2fc:	cb 01       	movw	r24, r22
 2fe:	89 87       	std	Y+9, r24	; 0x09
 300:	9a 87       	std	Y+10, r25	; 0x0a
 302:	ab 87       	std	Y+11, r26	; 0x0b
 304:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e8       	ldi	r20, 0x80	; 128
 30c:	5f e3       	ldi	r21, 0x3F	; 63
 30e:	69 85       	ldd	r22, Y+9	; 0x09
 310:	7a 85       	ldd	r23, Y+10	; 0x0a
 312:	8b 85       	ldd	r24, Y+11	; 0x0b
 314:	9c 85       	ldd	r25, Y+12	; 0x0c
 316:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 31a:	88 23       	and	r24, r24
 31c:	2c f4       	brge	.+10     	; 0x328 <main+0x80>
		__ticks = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9e 87       	std	Y+14, r25	; 0x0e
 324:	8d 87       	std	Y+13, r24	; 0x0d
 326:	3f c0       	rjmp	.+126    	; 0x3a6 <main+0xfe>
	else if (__tmp > 65535)
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	3f ef       	ldi	r19, 0xFF	; 255
 32c:	4f e7       	ldi	r20, 0x7F	; 127
 32e:	57 e4       	ldi	r21, 0x47	; 71
 330:	69 85       	ldd	r22, Y+9	; 0x09
 332:	7a 85       	ldd	r23, Y+10	; 0x0a
 334:	8b 85       	ldd	r24, Y+11	; 0x0b
 336:	9c 85       	ldd	r25, Y+12	; 0x0c
 338:	0e 94 2e 03 	call	0x65c	; 0x65c <__gesf2>
 33c:	18 16       	cp	r1, r24
 33e:	4c f5       	brge	.+82     	; 0x392 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	40 e2       	ldi	r20, 0x20	; 32
 346:	51 e4       	ldi	r21, 0x41	; 65
 348:	6d 81       	ldd	r22, Y+5	; 0x05
 34a:	7e 81       	ldd	r23, Y+6	; 0x06
 34c:	8f 81       	ldd	r24, Y+7	; 0x07
 34e:	98 85       	ldd	r25, Y+8	; 0x08
 350:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 354:	dc 01       	movw	r26, r24
 356:	cb 01       	movw	r24, r22
 358:	bc 01       	movw	r22, r24
 35a:	cd 01       	movw	r24, r26
 35c:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 360:	dc 01       	movw	r26, r24
 362:	cb 01       	movw	r24, r22
 364:	9e 87       	std	Y+14, r25	; 0x0e
 366:	8d 87       	std	Y+13, r24	; 0x0d
 368:	0f c0       	rjmp	.+30     	; 0x388 <main+0xe0>
 36a:	80 e9       	ldi	r24, 0x90	; 144
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	98 8b       	std	Y+16, r25	; 0x10
 370:	8f 87       	std	Y+15, r24	; 0x0f
 372:	8f 85       	ldd	r24, Y+15	; 0x0f
 374:	98 89       	ldd	r25, Y+16	; 0x10
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <main+0xce>
 37a:	98 8b       	std	Y+16, r25	; 0x10
 37c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 37e:	8d 85       	ldd	r24, Y+13	; 0x0d
 380:	9e 85       	ldd	r25, Y+14	; 0x0e
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	9e 87       	std	Y+14, r25	; 0x0e
 386:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 388:	8d 85       	ldd	r24, Y+13	; 0x0d
 38a:	9e 85       	ldd	r25, Y+14	; 0x0e
 38c:	89 2b       	or	r24, r25
 38e:	69 f7       	brne	.-38     	; 0x36a <main+0xc2>
 390:	14 c0       	rjmp	.+40     	; 0x3ba <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 392:	69 85       	ldd	r22, Y+9	; 0x09
 394:	7a 85       	ldd	r23, Y+10	; 0x0a
 396:	8b 85       	ldd	r24, Y+11	; 0x0b
 398:	9c 85       	ldd	r25, Y+12	; 0x0c
 39a:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 39e:	dc 01       	movw	r26, r24
 3a0:	cb 01       	movw	r24, r22
 3a2:	9e 87       	std	Y+14, r25	; 0x0e
 3a4:	8d 87       	std	Y+13, r24	; 0x0d
 3a6:	8d 85       	ldd	r24, Y+13	; 0x0d
 3a8:	9e 85       	ldd	r25, Y+14	; 0x0e
 3aa:	9a 8b       	std	Y+18, r25	; 0x12
 3ac:	89 8b       	std	Y+17, r24	; 0x11
 3ae:	89 89       	ldd	r24, Y+17	; 0x11
 3b0:	9a 89       	ldd	r25, Y+18	; 0x12
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x10a>
 3b6:	9a 8b       	std	Y+18, r25	; 0x12
 3b8:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(10);

    for(;;)
    {
		printf("Hello AVR printf\n");
 3ba:	8c e1       	ldi	r24, 0x1C	; 28
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 c8 03 	call	0x790	; 0x790 <puts>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	aa e7       	ldi	r26, 0x7A	; 122
 3c8:	b4 e4       	ldi	r27, 0x44	; 68
 3ca:	89 83       	std	Y+1, r24	; 0x01
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	ab 83       	std	Y+3, r26	; 0x03
 3d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	4a e7       	ldi	r20, 0x7A	; 122
 3d8:	55 e4       	ldi	r21, 0x45	; 69
 3da:	69 81       	ldd	r22, Y+1	; 0x01
 3dc:	7a 81       	ldd	r23, Y+2	; 0x02
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	9c 81       	ldd	r25, Y+4	; 0x04
 3e2:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 3e6:	dc 01       	movw	r26, r24
 3e8:	cb 01       	movw	r24, r22
 3ea:	8b 8b       	std	Y+19, r24	; 0x13
 3ec:	9c 8b       	std	Y+20, r25	; 0x14
 3ee:	ad 8b       	std	Y+21, r26	; 0x15
 3f0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e8       	ldi	r20, 0x80	; 128
 3f8:	5f e3       	ldi	r21, 0x3F	; 63
 3fa:	6b 89       	ldd	r22, Y+19	; 0x13
 3fc:	7c 89       	ldd	r23, Y+20	; 0x14
 3fe:	8d 89       	ldd	r24, Y+21	; 0x15
 400:	9e 89       	ldd	r25, Y+22	; 0x16
 402:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 406:	88 23       	and	r24, r24
 408:	2c f4       	brge	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		__ticks = 1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	98 8f       	std	Y+24, r25	; 0x18
 410:	8f 8b       	std	Y+23, r24	; 0x17
 412:	3f c0       	rjmp	.+126    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
	else if (__tmp > 65535)
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	3f ef       	ldi	r19, 0xFF	; 255
 418:	4f e7       	ldi	r20, 0x7F	; 127
 41a:	57 e4       	ldi	r21, 0x47	; 71
 41c:	6b 89       	ldd	r22, Y+19	; 0x13
 41e:	7c 89       	ldd	r23, Y+20	; 0x14
 420:	8d 89       	ldd	r24, Y+21	; 0x15
 422:	9e 89       	ldd	r25, Y+22	; 0x16
 424:	0e 94 2e 03 	call	0x65c	; 0x65c <__gesf2>
 428:	18 16       	cp	r1, r24
 42a:	4c f5       	brge	.+82     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	40 e2       	ldi	r20, 0x20	; 32
 432:	51 e4       	ldi	r21, 0x41	; 65
 434:	69 81       	ldd	r22, Y+1	; 0x01
 436:	7a 81       	ldd	r23, Y+2	; 0x02
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	9c 81       	ldd	r25, Y+4	; 0x04
 43c:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3>
 440:	dc 01       	movw	r26, r24
 442:	cb 01       	movw	r24, r22
 444:	bc 01       	movw	r22, r24
 446:	cd 01       	movw	r24, r26
 448:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 44c:	dc 01       	movw	r26, r24
 44e:	cb 01       	movw	r24, r22
 450:	98 8f       	std	Y+24, r25	; 0x18
 452:	8f 8b       	std	Y+23, r24	; 0x17
 454:	0f c0       	rjmp	.+30     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 456:	80 e9       	ldi	r24, 0x90	; 144
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	9a 8f       	std	Y+26, r25	; 0x1a
 45c:	89 8f       	std	Y+25, r24	; 0x19
 45e:	89 8d       	ldd	r24, Y+25	; 0x19
 460:	9a 8d       	ldd	r25, Y+26	; 0x1a
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 466:	9a 8f       	std	Y+26, r25	; 0x1a
 468:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46a:	8f 89       	ldd	r24, Y+23	; 0x17
 46c:	98 8d       	ldd	r25, Y+24	; 0x18
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	98 8f       	std	Y+24, r25	; 0x18
 472:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 474:	8f 89       	ldd	r24, Y+23	; 0x17
 476:	98 8d       	ldd	r25, Y+24	; 0x18
 478:	89 2b       	or	r24, r25
 47a:	69 f7       	brne	.-38     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 47e:	6b 89       	ldd	r22, Y+19	; 0x13
 480:	7c 89       	ldd	r23, Y+20	; 0x14
 482:	8d 89       	ldd	r24, Y+21	; 0x15
 484:	9e 89       	ldd	r25, Y+22	; 0x16
 486:	0e 94 b2 02 	call	0x564	; 0x564 <__fixunssfsi>
 48a:	dc 01       	movw	r26, r24
 48c:	cb 01       	movw	r24, r22
 48e:	98 8f       	std	Y+24, r25	; 0x18
 490:	8f 8b       	std	Y+23, r24	; 0x17
 492:	8f 89       	ldd	r24, Y+23	; 0x17
 494:	98 8d       	ldd	r25, Y+24	; 0x18
 496:	9c 8f       	std	Y+28, r25	; 0x1c
 498:	8b 8f       	std	Y+27, r24	; 0x1b
 49a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 49c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a2:	9c 8f       	std	Y+28, r25	; 0x1c
 4a4:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
	}
 4a6:	89 cf       	rjmp	.-238    	; 0x3ba <main+0x112>

000004a8 <usart_initialize>:
#include <stdio.h>

#define BAUD_RATE      9600
#define BAUD_PRESCALE (F_CPU/16/BAUD_RATE-1)

void usart_initialize(void) {
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
	UBRR0H = (BAUD_PRESCALE >> 8);
 4b0:	85 ec       	ldi	r24, 0xC5	; 197
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	fc 01       	movw	r30, r24
 4b6:	10 82       	st	Z, r1
	UBRR0L = BAUD_PRESCALE;
 4b8:	84 ec       	ldi	r24, 0xC4	; 196
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	27 e6       	ldi	r18, 0x67	; 103
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 4c2:	81 ec       	ldi	r24, 0xC1	; 193
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	28 e1       	ldi	r18, 0x18	; 24
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 4cc:	82 ec       	ldi	r24, 0xC2	; 194
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	26 e0       	ldi	r18, 0x06	; 6
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
}
 4d6:	00 00       	nop
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <usart_send_byte>:

void usart_send_byte(char byte, FILE *stream) {
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <usart_send_byte+0x6>
 4e4:	1f 92       	push	r1
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	89 83       	std	Y+1, r24	; 0x01
 4ec:	7b 83       	std	Y+3, r23	; 0x03
 4ee:	6a 83       	std	Y+2, r22	; 0x02
	if (byte == '\n') {
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	8a 30       	cpi	r24, 0x0A	; 10
 4f4:	31 f4       	brne	.+12     	; 0x502 <usart_send_byte+0x24>
		usart_send_byte('\r',stream);
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	9b 81       	ldd	r25, Y+3	; 0x03
 4fa:	bc 01       	movw	r22, r24
 4fc:	8d e0       	ldi	r24, 0x0D	; 13
 4fe:	0e 94 6f 02 	call	0x4de	; 0x4de <usart_send_byte>
	}
		loop_until_bit_is_set(UCSR0A,UDRE0);
 502:	80 ec       	ldi	r24, 0xC0	; 192
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	fc 01       	movw	r30, r24
 508:	80 81       	ld	r24, Z
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	80 72       	andi	r24, 0x20	; 32
 510:	99 27       	eor	r25, r25
 512:	89 2b       	or	r24, r25
 514:	b1 f3       	breq	.-20     	; 0x502 <usart_send_byte+0x24>
		UDR0 = byte;
 516:	86 ec       	ldi	r24, 0xC6	; 198
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	29 81       	ldd	r18, Y+1	; 0x01
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
}
 520:	00 00       	nop
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <usart_get_byte>:

char usart_get_byte(FILE *stream) {
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	00 d0       	rcall	.+0      	; 0x534 <usart_get_byte+0x6>
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	9a 83       	std	Y+2, r25	; 0x02
 53a:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, RXC0);
 53c:	80 ec       	ldi	r24, 0xC0	; 192
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	fc 01       	movw	r30, r24
 542:	80 81       	ld	r24, Z
 544:	88 23       	and	r24, r24
 546:	d4 f7       	brge	.-12     	; 0x53c <usart_get_byte+0xe>
    return UDR0;
 548:	86 ec       	ldi	r24, 0xC6	; 198
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	fc 01       	movw	r30, r24
 54e:	80 81       	ld	r24, Z
}
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <__cmpsf2>:
 55a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_cmp>
 55e:	08 f4       	brcc	.+2      	; 0x562 <__cmpsf2+0x8>
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret

00000564 <__fixunssfsi>:
 564:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_splitA>
 568:	88 f0       	brcs	.+34     	; 0x58c <__fixunssfsi+0x28>
 56a:	9f 57       	subi	r25, 0x7F	; 127
 56c:	98 f0       	brcs	.+38     	; 0x594 <__fixunssfsi+0x30>
 56e:	b9 2f       	mov	r27, r25
 570:	99 27       	eor	r25, r25
 572:	b7 51       	subi	r27, 0x17	; 23
 574:	b0 f0       	brcs	.+44     	; 0x5a2 <__fixunssfsi+0x3e>
 576:	e1 f0       	breq	.+56     	; 0x5b0 <__fixunssfsi+0x4c>
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	1a f0       	brmi	.+6      	; 0x588 <__fixunssfsi+0x24>
 582:	ba 95       	dec	r27
 584:	c9 f7       	brne	.-14     	; 0x578 <__fixunssfsi+0x14>
 586:	14 c0       	rjmp	.+40     	; 0x5b0 <__fixunssfsi+0x4c>
 588:	b1 30       	cpi	r27, 0x01	; 1
 58a:	91 f0       	breq	.+36     	; 0x5b0 <__fixunssfsi+0x4c>
 58c:	0e 94 27 03 	call	0x64e	; 0x64e <__fp_zero>
 590:	b1 e0       	ldi	r27, 0x01	; 1
 592:	08 95       	ret
 594:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_zero>
 598:	67 2f       	mov	r22, r23
 59a:	78 2f       	mov	r23, r24
 59c:	88 27       	eor	r24, r24
 59e:	b8 5f       	subi	r27, 0xF8	; 248
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <__fixunssfsi+0x4c>
 5a2:	b9 3f       	cpi	r27, 0xF9	; 249
 5a4:	cc f3       	brlt	.-14     	; 0x598 <__fixunssfsi+0x34>
 5a6:	86 95       	lsr	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b3 95       	inc	r27
 5ae:	d9 f7       	brne	.-10     	; 0x5a6 <__fixunssfsi+0x42>
 5b0:	3e f4       	brtc	.+14     	; 0x5c0 <__fixunssfsi+0x5c>
 5b2:	90 95       	com	r25
 5b4:	80 95       	com	r24
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__fp_cmp>:
 5c2:	99 0f       	add	r25, r25
 5c4:	00 08       	sbc	r0, r0
 5c6:	55 0f       	add	r21, r21
 5c8:	aa 0b       	sbc	r26, r26
 5ca:	e0 e8       	ldi	r30, 0x80	; 128
 5cc:	fe ef       	ldi	r31, 0xFE	; 254
 5ce:	16 16       	cp	r1, r22
 5d0:	17 06       	cpc	r1, r23
 5d2:	e8 07       	cpc	r30, r24
 5d4:	f9 07       	cpc	r31, r25
 5d6:	c0 f0       	brcs	.+48     	; 0x608 <__fp_cmp+0x46>
 5d8:	12 16       	cp	r1, r18
 5da:	13 06       	cpc	r1, r19
 5dc:	e4 07       	cpc	r30, r20
 5de:	f5 07       	cpc	r31, r21
 5e0:	98 f0       	brcs	.+38     	; 0x608 <__fp_cmp+0x46>
 5e2:	62 1b       	sub	r22, r18
 5e4:	73 0b       	sbc	r23, r19
 5e6:	84 0b       	sbc	r24, r20
 5e8:	95 0b       	sbc	r25, r21
 5ea:	39 f4       	brne	.+14     	; 0x5fa <__fp_cmp+0x38>
 5ec:	0a 26       	eor	r0, r26
 5ee:	61 f0       	breq	.+24     	; 0x608 <__fp_cmp+0x46>
 5f0:	23 2b       	or	r18, r19
 5f2:	24 2b       	or	r18, r20
 5f4:	25 2b       	or	r18, r21
 5f6:	21 f4       	brne	.+8      	; 0x600 <__fp_cmp+0x3e>
 5f8:	08 95       	ret
 5fa:	0a 26       	eor	r0, r26
 5fc:	09 f4       	brne	.+2      	; 0x600 <__fp_cmp+0x3e>
 5fe:	a1 40       	sbci	r26, 0x01	; 1
 600:	a6 95       	lsr	r26
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	81 1d       	adc	r24, r1
 606:	81 1d       	adc	r24, r1
 608:	08 95       	ret

0000060a <__fp_split3>:
 60a:	57 fd       	sbrc	r21, 7
 60c:	90 58       	subi	r25, 0x80	; 128
 60e:	44 0f       	add	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	59 f0       	breq	.+22     	; 0x62a <__fp_splitA+0x10>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	71 f0       	breq	.+28     	; 0x634 <__fp_splitA+0x1a>
 618:	47 95       	ror	r20

0000061a <__fp_splitA>:
 61a:	88 0f       	add	r24, r24
 61c:	97 fb       	bst	r25, 7
 61e:	99 1f       	adc	r25, r25
 620:	61 f0       	breq	.+24     	; 0x63a <__fp_splitA+0x20>
 622:	9f 3f       	cpi	r25, 0xFF	; 255
 624:	79 f0       	breq	.+30     	; 0x644 <__fp_splitA+0x2a>
 626:	87 95       	ror	r24
 628:	08 95       	ret
 62a:	12 16       	cp	r1, r18
 62c:	13 06       	cpc	r1, r19
 62e:	14 06       	cpc	r1, r20
 630:	55 1f       	adc	r21, r21
 632:	f2 cf       	rjmp	.-28     	; 0x618 <__fp_split3+0xe>
 634:	46 95       	lsr	r20
 636:	f1 df       	rcall	.-30     	; 0x61a <__fp_splitA>
 638:	08 c0       	rjmp	.+16     	; 0x64a <__fp_splitA+0x30>
 63a:	16 16       	cp	r1, r22
 63c:	17 06       	cpc	r1, r23
 63e:	18 06       	cpc	r1, r24
 640:	99 1f       	adc	r25, r25
 642:	f1 cf       	rjmp	.-30     	; 0x626 <__fp_splitA+0xc>
 644:	86 95       	lsr	r24
 646:	71 05       	cpc	r23, r1
 648:	61 05       	cpc	r22, r1
 64a:	08 94       	sec
 64c:	08 95       	ret

0000064e <__fp_zero>:
 64e:	e8 94       	clt

00000650 <__fp_szero>:
 650:	bb 27       	eor	r27, r27
 652:	66 27       	eor	r22, r22
 654:	77 27       	eor	r23, r23
 656:	cb 01       	movw	r24, r22
 658:	97 f9       	bld	r25, 7
 65a:	08 95       	ret

0000065c <__gesf2>:
 65c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_cmp>
 660:	08 f4       	brcc	.+2      	; 0x664 <__gesf2+0x8>
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	08 95       	ret

00000666 <__mulsf3>:
 666:	0e 94 46 03 	call	0x68c	; 0x68c <__mulsf3x>
 66a:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_round>
 66e:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_pscA>
 672:	38 f0       	brcs	.+14     	; 0x682 <__mulsf3+0x1c>
 674:	0e 94 b0 03 	call	0x760	; 0x760 <__fp_pscB>
 678:	20 f0       	brcs	.+8      	; 0x682 <__mulsf3+0x1c>
 67a:	95 23       	and	r25, r21
 67c:	11 f0       	breq	.+4      	; 0x682 <__mulsf3+0x1c>
 67e:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_inf>
 682:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_nan>
 686:	11 24       	eor	r1, r1
 688:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_szero>

0000068c <__mulsf3x>:
 68c:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_split3>
 690:	70 f3       	brcs	.-36     	; 0x66e <__mulsf3+0x8>

00000692 <__mulsf3_pse>:
 692:	95 9f       	mul	r25, r21
 694:	c1 f3       	breq	.-16     	; 0x686 <__mulsf3+0x20>
 696:	95 0f       	add	r25, r21
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	55 1f       	adc	r21, r21
 69c:	62 9f       	mul	r22, r18
 69e:	f0 01       	movw	r30, r0
 6a0:	72 9f       	mul	r23, r18
 6a2:	bb 27       	eor	r27, r27
 6a4:	f0 0d       	add	r31, r0
 6a6:	b1 1d       	adc	r27, r1
 6a8:	63 9f       	mul	r22, r19
 6aa:	aa 27       	eor	r26, r26
 6ac:	f0 0d       	add	r31, r0
 6ae:	b1 1d       	adc	r27, r1
 6b0:	aa 1f       	adc	r26, r26
 6b2:	64 9f       	mul	r22, r20
 6b4:	66 27       	eor	r22, r22
 6b6:	b0 0d       	add	r27, r0
 6b8:	a1 1d       	adc	r26, r1
 6ba:	66 1f       	adc	r22, r22
 6bc:	82 9f       	mul	r24, r18
 6be:	22 27       	eor	r18, r18
 6c0:	b0 0d       	add	r27, r0
 6c2:	a1 1d       	adc	r26, r1
 6c4:	62 1f       	adc	r22, r18
 6c6:	73 9f       	mul	r23, r19
 6c8:	b0 0d       	add	r27, r0
 6ca:	a1 1d       	adc	r26, r1
 6cc:	62 1f       	adc	r22, r18
 6ce:	83 9f       	mul	r24, r19
 6d0:	a0 0d       	add	r26, r0
 6d2:	61 1d       	adc	r22, r1
 6d4:	22 1f       	adc	r18, r18
 6d6:	74 9f       	mul	r23, r20
 6d8:	33 27       	eor	r19, r19
 6da:	a0 0d       	add	r26, r0
 6dc:	61 1d       	adc	r22, r1
 6de:	23 1f       	adc	r18, r19
 6e0:	84 9f       	mul	r24, r20
 6e2:	60 0d       	add	r22, r0
 6e4:	21 1d       	adc	r18, r1
 6e6:	82 2f       	mov	r24, r18
 6e8:	76 2f       	mov	r23, r22
 6ea:	6a 2f       	mov	r22, r26
 6ec:	11 24       	eor	r1, r1
 6ee:	9f 57       	subi	r25, 0x7F	; 127
 6f0:	50 40       	sbci	r21, 0x00	; 0
 6f2:	9a f0       	brmi	.+38     	; 0x71a <__mulsf3_pse+0x88>
 6f4:	f1 f0       	breq	.+60     	; 0x732 <__mulsf3_pse+0xa0>
 6f6:	88 23       	and	r24, r24
 6f8:	4a f0       	brmi	.+18     	; 0x70c <__mulsf3_pse+0x7a>
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	bb 1f       	adc	r27, r27
 700:	66 1f       	adc	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	91 50       	subi	r25, 0x01	; 1
 708:	50 40       	sbci	r21, 0x00	; 0
 70a:	a9 f7       	brne	.-22     	; 0x6f6 <__mulsf3_pse+0x64>
 70c:	9e 3f       	cpi	r25, 0xFE	; 254
 70e:	51 05       	cpc	r21, r1
 710:	80 f0       	brcs	.+32     	; 0x732 <__mulsf3_pse+0xa0>
 712:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_inf>
 716:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_szero>
 71a:	5f 3f       	cpi	r21, 0xFF	; 255
 71c:	e4 f3       	brlt	.-8      	; 0x716 <__mulsf3_pse+0x84>
 71e:	98 3e       	cpi	r25, 0xE8	; 232
 720:	d4 f3       	brlt	.-12     	; 0x716 <__mulsf3_pse+0x84>
 722:	86 95       	lsr	r24
 724:	77 95       	ror	r23
 726:	67 95       	ror	r22
 728:	b7 95       	ror	r27
 72a:	f7 95       	ror	r31
 72c:	e7 95       	ror	r30
 72e:	9f 5f       	subi	r25, 0xFF	; 255
 730:	c1 f7       	brne	.-16     	; 0x722 <__mulsf3_pse+0x90>
 732:	fe 2b       	or	r31, r30
 734:	88 0f       	add	r24, r24
 736:	91 1d       	adc	r25, r1
 738:	96 95       	lsr	r25
 73a:	87 95       	ror	r24
 73c:	97 f9       	bld	r25, 7
 73e:	08 95       	ret

00000740 <__fp_inf>:
 740:	97 f9       	bld	r25, 7
 742:	9f 67       	ori	r25, 0x7F	; 127
 744:	80 e8       	ldi	r24, 0x80	; 128
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	08 95       	ret

0000074c <__fp_nan>:
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	80 ec       	ldi	r24, 0xC0	; 192
 750:	08 95       	ret

00000752 <__fp_pscA>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	16 16       	cp	r1, r22
 758:	17 06       	cpc	r1, r23
 75a:	18 06       	cpc	r1, r24
 75c:	09 06       	cpc	r0, r25
 75e:	08 95       	ret

00000760 <__fp_pscB>:
 760:	00 24       	eor	r0, r0
 762:	0a 94       	dec	r0
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	05 06       	cpc	r0, r21
 76c:	08 95       	ret

0000076e <__fp_round>:
 76e:	09 2e       	mov	r0, r25
 770:	03 94       	inc	r0
 772:	00 0c       	add	r0, r0
 774:	11 f4       	brne	.+4      	; 0x77a <__fp_round+0xc>
 776:	88 23       	and	r24, r24
 778:	52 f0       	brmi	.+20     	; 0x78e <__fp_round+0x20>
 77a:	bb 0f       	add	r27, r27
 77c:	40 f4       	brcc	.+16     	; 0x78e <__fp_round+0x20>
 77e:	bf 2b       	or	r27, r31
 780:	11 f4       	brne	.+4      	; 0x786 <__fp_round+0x18>
 782:	60 ff       	sbrs	r22, 0
 784:	04 c0       	rjmp	.+8      	; 0x78e <__fp_round+0x20>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	08 95       	ret

00000790 <puts>:
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end+0x2>
 79c:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__data_end+0x3>
 7a0:	23 81       	ldd	r18, Z+3	; 0x03
 7a2:	21 ff       	sbrs	r18, 1
 7a4:	1b c0       	rjmp	.+54     	; 0x7dc <puts+0x4c>
 7a6:	8c 01       	movw	r16, r24
 7a8:	d0 e0       	ldi	r29, 0x00	; 0
 7aa:	c0 e0       	ldi	r28, 0x00	; 0
 7ac:	f8 01       	movw	r30, r16
 7ae:	81 91       	ld	r24, Z+
 7b0:	8f 01       	movw	r16, r30
 7b2:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end+0x2>
 7b6:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x3>
 7ba:	db 01       	movw	r26, r22
 7bc:	18 96       	adiw	r26, 0x08	; 8
 7be:	ed 91       	ld	r30, X+
 7c0:	fc 91       	ld	r31, X
 7c2:	19 97       	sbiw	r26, 0x09	; 9
 7c4:	88 23       	and	r24, r24
 7c6:	31 f0       	breq	.+12     	; 0x7d4 <puts+0x44>
 7c8:	09 95       	icall
 7ca:	89 2b       	or	r24, r25
 7cc:	79 f3       	breq	.-34     	; 0x7ac <puts+0x1c>
 7ce:	df ef       	ldi	r29, 0xFF	; 255
 7d0:	cf ef       	ldi	r28, 0xFF	; 255
 7d2:	ec cf       	rjmp	.-40     	; 0x7ac <puts+0x1c>
 7d4:	8a e0       	ldi	r24, 0x0A	; 10
 7d6:	09 95       	icall
 7d8:	89 2b       	or	r24, r25
 7da:	19 f0       	breq	.+6      	; 0x7e2 <puts+0x52>
 7dc:	8f ef       	ldi	r24, 0xFF	; 255
 7de:	9f ef       	ldi	r25, 0xFF	; 255
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <puts+0x56>
 7e2:	8d 2f       	mov	r24, r29
 7e4:	9c 2f       	mov	r25, r28
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
