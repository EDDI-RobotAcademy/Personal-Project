
bin/Debug/ddd_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004b4  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000660  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d0c  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU       16000000L
#include <util/delay.h>


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	6c 97       	sbiw	r28, 0x1c	; 28
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61

    // Insert code
    DDRB = 0x20;
  94:	84 e2       	ldi	r24, 0x24	; 36
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	20 e2       	ldi	r18, 0x20	; 32
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18

    while(1)
    {
        PORTB = 0x00;
  9e:	85 e2       	ldi	r24, 0x25	; 37
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	fc 01       	movw	r30, r24
  a4:	10 82       	st	Z, r1
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	aa ef       	ldi	r26, 0xFA	; 250
  ac:	b3 e4       	ldi	r27, 0x43	; 67
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	ab 83       	std	Y+3, r26	; 0x03
  b4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	4a e7       	ldi	r20, 0x7A	; 122
  bc:	55 e4       	ldi	r21, 0x45	; 69
  be:	69 81       	ldd	r22, Y+1	; 0x01
  c0:	7a 81       	ldd	r23, Y+2	; 0x02
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	9c 81       	ldd	r25, Y+4	; 0x04
  c6:	0e 94 c3 01 	call	0x386	; 0x386 <__mulsf3>
  ca:	dc 01       	movw	r26, r24
  cc:	cb 01       	movw	r24, r22
  ce:	8b 8b       	std	Y+19, r24	; 0x13
  d0:	9c 8b       	std	Y+20, r25	; 0x14
  d2:	ad 8b       	std	Y+21, r26	; 0x15
  d4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	40 e8       	ldi	r20, 0x80	; 128
  dc:	5f e3       	ldi	r21, 0x3F	; 63
  de:	6b 89       	ldd	r22, Y+19	; 0x13
  e0:	7c 89       	ldd	r23, Y+20	; 0x14
  e2:	8d 89       	ldd	r24, Y+21	; 0x15
  e4:	9e 89       	ldd	r25, Y+22	; 0x16
  e6:	0e 94 3d 01 	call	0x27a	; 0x27a <__cmpsf2>
  ea:	88 23       	and	r24, r24
  ec:	2c f4       	brge	.+10     	; 0xf8 <main+0x78>
		__ticks = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	98 8f       	std	Y+24, r25	; 0x18
  f4:	8f 8b       	std	Y+23, r24	; 0x17
  f6:	3f c0       	rjmp	.+126    	; 0x176 <main+0xf6>
	else if (__tmp > 65535)
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	3f ef       	ldi	r19, 0xFF	; 255
  fc:	4f e7       	ldi	r20, 0x7F	; 127
  fe:	57 e4       	ldi	r21, 0x47	; 71
 100:	6b 89       	ldd	r22, Y+19	; 0x13
 102:	7c 89       	ldd	r23, Y+20	; 0x14
 104:	8d 89       	ldd	r24, Y+21	; 0x15
 106:	9e 89       	ldd	r25, Y+22	; 0x16
 108:	0e 94 be 01 	call	0x37c	; 0x37c <__gesf2>
 10c:	18 16       	cp	r1, r24
 10e:	4c f5       	brge	.+82     	; 0x162 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e2       	ldi	r20, 0x20	; 32
 116:	51 e4       	ldi	r21, 0x41	; 65
 118:	69 81       	ldd	r22, Y+1	; 0x01
 11a:	7a 81       	ldd	r23, Y+2	; 0x02
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	9c 81       	ldd	r25, Y+4	; 0x04
 120:	0e 94 c3 01 	call	0x386	; 0x386 <__mulsf3>
 124:	dc 01       	movw	r26, r24
 126:	cb 01       	movw	r24, r22
 128:	bc 01       	movw	r22, r24
 12a:	cd 01       	movw	r24, r26
 12c:	0e 94 42 01 	call	0x284	; 0x284 <__fixunssfsi>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	98 8f       	std	Y+24, r25	; 0x18
 136:	8f 8b       	std	Y+23, r24	; 0x17
 138:	0f c0       	rjmp	.+30     	; 0x158 <main+0xd8>
 13a:	80 e9       	ldi	r24, 0x90	; 144
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	9a 8f       	std	Y+26, r25	; 0x1a
 140:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 142:	89 8d       	ldd	r24, Y+25	; 0x19
 144:	9a 8d       	ldd	r25, Y+26	; 0x1a
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0xc6>
 14a:	9a 8f       	std	Y+26, r25	; 0x1a
 14c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	8f 89       	ldd	r24, Y+23	; 0x17
 150:	98 8d       	ldd	r25, Y+24	; 0x18
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	98 8f       	std	Y+24, r25	; 0x18
 156:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	8f 89       	ldd	r24, Y+23	; 0x17
 15a:	98 8d       	ldd	r25, Y+24	; 0x18
 15c:	89 2b       	or	r24, r25
 15e:	69 f7       	brne	.-38     	; 0x13a <main+0xba>
 160:	14 c0       	rjmp	.+40     	; 0x18a <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 162:	6b 89       	ldd	r22, Y+19	; 0x13
 164:	7c 89       	ldd	r23, Y+20	; 0x14
 166:	8d 89       	ldd	r24, Y+21	; 0x15
 168:	9e 89       	ldd	r25, Y+22	; 0x16
 16a:	0e 94 42 01 	call	0x284	; 0x284 <__fixunssfsi>
 16e:	dc 01       	movw	r26, r24
 170:	cb 01       	movw	r24, r22
 172:	98 8f       	std	Y+24, r25	; 0x18
 174:	8f 8b       	std	Y+23, r24	; 0x17
 176:	8f 89       	ldd	r24, Y+23	; 0x17
 178:	98 8d       	ldd	r25, Y+24	; 0x18
 17a:	9c 8f       	std	Y+28, r25	; 0x1c
 17c:	8b 8f       	std	Y+27, r24	; 0x1b
 17e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 180:	9c 8d       	ldd	r25, Y+28	; 0x1c
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x102>
 186:	9c 8f       	std	Y+28, r25	; 0x1c
 188:	8b 8f       	std	Y+27, r24	; 0x1b
        _delay_ms(500);
        PORTB = 0x20;
 18a:	85 e2       	ldi	r24, 0x25	; 37
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	aa ef       	ldi	r26, 0xFA	; 250
 19a:	b3 e4       	ldi	r27, 0x43	; 67
 19c:	8d 83       	std	Y+5, r24	; 0x05
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	af 83       	std	Y+7, r26	; 0x07
 1a2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	4a e7       	ldi	r20, 0x7A	; 122
 1aa:	55 e4       	ldi	r21, 0x45	; 69
 1ac:	6d 81       	ldd	r22, Y+5	; 0x05
 1ae:	7e 81       	ldd	r23, Y+6	; 0x06
 1b0:	8f 81       	ldd	r24, Y+7	; 0x07
 1b2:	98 85       	ldd	r25, Y+8	; 0x08
 1b4:	0e 94 c3 01 	call	0x386	; 0x386 <__mulsf3>
 1b8:	dc 01       	movw	r26, r24
 1ba:	cb 01       	movw	r24, r22
 1bc:	89 87       	std	Y+9, r24	; 0x09
 1be:	9a 87       	std	Y+10, r25	; 0x0a
 1c0:	ab 87       	std	Y+11, r26	; 0x0b
 1c2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e8       	ldi	r20, 0x80	; 128
 1ca:	5f e3       	ldi	r21, 0x3F	; 63
 1cc:	69 85       	ldd	r22, Y+9	; 0x09
 1ce:	7a 85       	ldd	r23, Y+10	; 0x0a
 1d0:	8b 85       	ldd	r24, Y+11	; 0x0b
 1d2:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d4:	0e 94 3d 01 	call	0x27a	; 0x27a <__cmpsf2>
 1d8:	88 23       	and	r24, r24
 1da:	2c f4       	brge	.+10     	; 0x1e6 <main+0x166>
		__ticks = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9e 87       	std	Y+14, r25	; 0x0e
 1e2:	8d 87       	std	Y+13, r24	; 0x0d
 1e4:	3f c0       	rjmp	.+126    	; 0x264 <main+0x1e4>
	else if (__tmp > 65535)
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	3f ef       	ldi	r19, 0xFF	; 255
 1ea:	4f e7       	ldi	r20, 0x7F	; 127
 1ec:	57 e4       	ldi	r21, 0x47	; 71
 1ee:	69 85       	ldd	r22, Y+9	; 0x09
 1f0:	7a 85       	ldd	r23, Y+10	; 0x0a
 1f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1f6:	0e 94 be 01 	call	0x37c	; 0x37c <__gesf2>
 1fa:	18 16       	cp	r1, r24
 1fc:	4c f5       	brge	.+82     	; 0x250 <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	40 e2       	ldi	r20, 0x20	; 32
 204:	51 e4       	ldi	r21, 0x41	; 65
 206:	6d 81       	ldd	r22, Y+5	; 0x05
 208:	7e 81       	ldd	r23, Y+6	; 0x06
 20a:	8f 81       	ldd	r24, Y+7	; 0x07
 20c:	98 85       	ldd	r25, Y+8	; 0x08
 20e:	0e 94 c3 01 	call	0x386	; 0x386 <__mulsf3>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	bc 01       	movw	r22, r24
 218:	cd 01       	movw	r24, r26
 21a:	0e 94 42 01 	call	0x284	; 0x284 <__fixunssfsi>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	9e 87       	std	Y+14, r25	; 0x0e
 224:	8d 87       	std	Y+13, r24	; 0x0d
 226:	0f c0       	rjmp	.+30     	; 0x246 <main+0x1c6>
 228:	80 e9       	ldi	r24, 0x90	; 144
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	98 8b       	std	Y+16, r25	; 0x10
 22e:	8f 87       	std	Y+15, r24	; 0x0f
 230:	8f 85       	ldd	r24, Y+15	; 0x0f
 232:	98 89       	ldd	r25, Y+16	; 0x10
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x1b4>
 238:	98 8b       	std	Y+16, r25	; 0x10
 23a:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23c:	8d 85       	ldd	r24, Y+13	; 0x0d
 23e:	9e 85       	ldd	r25, Y+14	; 0x0e
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	9e 87       	std	Y+14, r25	; 0x0e
 244:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	8d 85       	ldd	r24, Y+13	; 0x0d
 248:	9e 85       	ldd	r25, Y+14	; 0x0e
 24a:	89 2b       	or	r24, r25
 24c:	69 f7       	brne	.-38     	; 0x228 <main+0x1a8>
 24e:	14 c0       	rjmp	.+40     	; 0x278 <main+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 250:	69 85       	ldd	r22, Y+9	; 0x09
 252:	7a 85       	ldd	r23, Y+10	; 0x0a
 254:	8b 85       	ldd	r24, Y+11	; 0x0b
 256:	9c 85       	ldd	r25, Y+12	; 0x0c
 258:	0e 94 42 01 	call	0x284	; 0x284 <__fixunssfsi>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	9e 87       	std	Y+14, r25	; 0x0e
 262:	8d 87       	std	Y+13, r24	; 0x0d
 264:	8d 85       	ldd	r24, Y+13	; 0x0d
 266:	9e 85       	ldd	r25, Y+14	; 0x0e
 268:	9a 8b       	std	Y+18, r25	; 0x12
 26a:	89 8b       	std	Y+17, r24	; 0x11
 26c:	89 89       	ldd	r24, Y+17	; 0x11
 26e:	9a 89       	ldd	r25, Y+18	; 0x12
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x1f0>
 274:	9a 8b       	std	Y+18, r25	; 0x12
 276:	89 8b       	std	Y+17, r24	; 0x11
        _delay_ms(500);
    }
 278:	12 cf       	rjmp	.-476    	; 0x9e <main+0x1e>

0000027a <__cmpsf2>:
 27a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__fp_cmp>
 27e:	08 f4       	brcc	.+2      	; 0x282 <__cmpsf2+0x8>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret

00000284 <__fixunssfsi>:
 284:	0e 94 9d 01 	call	0x33a	; 0x33a <__fp_splitA>
 288:	88 f0       	brcs	.+34     	; 0x2ac <__fixunssfsi+0x28>
 28a:	9f 57       	subi	r25, 0x7F	; 127
 28c:	98 f0       	brcs	.+38     	; 0x2b4 <__fixunssfsi+0x30>
 28e:	b9 2f       	mov	r27, r25
 290:	99 27       	eor	r25, r25
 292:	b7 51       	subi	r27, 0x17	; 23
 294:	b0 f0       	brcs	.+44     	; 0x2c2 <__fixunssfsi+0x3e>
 296:	e1 f0       	breq	.+56     	; 0x2d0 <__fixunssfsi+0x4c>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	88 1f       	adc	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	1a f0       	brmi	.+6      	; 0x2a8 <__fixunssfsi+0x24>
 2a2:	ba 95       	dec	r27
 2a4:	c9 f7       	brne	.-14     	; 0x298 <__fixunssfsi+0x14>
 2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__fixunssfsi+0x4c>
 2a8:	b1 30       	cpi	r27, 0x01	; 1
 2aa:	91 f0       	breq	.+36     	; 0x2d0 <__fixunssfsi+0x4c>
 2ac:	0e 94 b7 01 	call	0x36e	; 0x36e <__fp_zero>
 2b0:	b1 e0       	ldi	r27, 0x01	; 1
 2b2:	08 95       	ret
 2b4:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_zero>
 2b8:	67 2f       	mov	r22, r23
 2ba:	78 2f       	mov	r23, r24
 2bc:	88 27       	eor	r24, r24
 2be:	b8 5f       	subi	r27, 0xF8	; 248
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <__fixunssfsi+0x4c>
 2c2:	b9 3f       	cpi	r27, 0xF9	; 249
 2c4:	cc f3       	brlt	.-14     	; 0x2b8 <__fixunssfsi+0x34>
 2c6:	86 95       	lsr	r24
 2c8:	77 95       	ror	r23
 2ca:	67 95       	ror	r22
 2cc:	b3 95       	inc	r27
 2ce:	d9 f7       	brne	.-10     	; 0x2c6 <__fixunssfsi+0x42>
 2d0:	3e f4       	brtc	.+14     	; 0x2e0 <__fixunssfsi+0x5c>
 2d2:	90 95       	com	r25
 2d4:	80 95       	com	r24
 2d6:	70 95       	com	r23
 2d8:	61 95       	neg	r22
 2da:	7f 4f       	sbci	r23, 0xFF	; 255
 2dc:	8f 4f       	sbci	r24, 0xFF	; 255
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	08 95       	ret

000002e2 <__fp_cmp>:
 2e2:	99 0f       	add	r25, r25
 2e4:	00 08       	sbc	r0, r0
 2e6:	55 0f       	add	r21, r21
 2e8:	aa 0b       	sbc	r26, r26
 2ea:	e0 e8       	ldi	r30, 0x80	; 128
 2ec:	fe ef       	ldi	r31, 0xFE	; 254
 2ee:	16 16       	cp	r1, r22
 2f0:	17 06       	cpc	r1, r23
 2f2:	e8 07       	cpc	r30, r24
 2f4:	f9 07       	cpc	r31, r25
 2f6:	c0 f0       	brcs	.+48     	; 0x328 <__fp_cmp+0x46>
 2f8:	12 16       	cp	r1, r18
 2fa:	13 06       	cpc	r1, r19
 2fc:	e4 07       	cpc	r30, r20
 2fe:	f5 07       	cpc	r31, r21
 300:	98 f0       	brcs	.+38     	; 0x328 <__fp_cmp+0x46>
 302:	62 1b       	sub	r22, r18
 304:	73 0b       	sbc	r23, r19
 306:	84 0b       	sbc	r24, r20
 308:	95 0b       	sbc	r25, r21
 30a:	39 f4       	brne	.+14     	; 0x31a <__fp_cmp+0x38>
 30c:	0a 26       	eor	r0, r26
 30e:	61 f0       	breq	.+24     	; 0x328 <__fp_cmp+0x46>
 310:	23 2b       	or	r18, r19
 312:	24 2b       	or	r18, r20
 314:	25 2b       	or	r18, r21
 316:	21 f4       	brne	.+8      	; 0x320 <__fp_cmp+0x3e>
 318:	08 95       	ret
 31a:	0a 26       	eor	r0, r26
 31c:	09 f4       	brne	.+2      	; 0x320 <__fp_cmp+0x3e>
 31e:	a1 40       	sbci	r26, 0x01	; 1
 320:	a6 95       	lsr	r26
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	81 1d       	adc	r24, r1
 326:	81 1d       	adc	r24, r1
 328:	08 95       	ret

0000032a <__fp_split3>:
 32a:	57 fd       	sbrc	r21, 7
 32c:	90 58       	subi	r25, 0x80	; 128
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	59 f0       	breq	.+22     	; 0x34a <__fp_splitA+0x10>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	71 f0       	breq	.+28     	; 0x354 <__fp_splitA+0x1a>
 338:	47 95       	ror	r20

0000033a <__fp_splitA>:
 33a:	88 0f       	add	r24, r24
 33c:	97 fb       	bst	r25, 7
 33e:	99 1f       	adc	r25, r25
 340:	61 f0       	breq	.+24     	; 0x35a <__fp_splitA+0x20>
 342:	9f 3f       	cpi	r25, 0xFF	; 255
 344:	79 f0       	breq	.+30     	; 0x364 <__fp_splitA+0x2a>
 346:	87 95       	ror	r24
 348:	08 95       	ret
 34a:	12 16       	cp	r1, r18
 34c:	13 06       	cpc	r1, r19
 34e:	14 06       	cpc	r1, r20
 350:	55 1f       	adc	r21, r21
 352:	f2 cf       	rjmp	.-28     	; 0x338 <__fp_split3+0xe>
 354:	46 95       	lsr	r20
 356:	f1 df       	rcall	.-30     	; 0x33a <__fp_splitA>
 358:	08 c0       	rjmp	.+16     	; 0x36a <__fp_splitA+0x30>
 35a:	16 16       	cp	r1, r22
 35c:	17 06       	cpc	r1, r23
 35e:	18 06       	cpc	r1, r24
 360:	99 1f       	adc	r25, r25
 362:	f1 cf       	rjmp	.-30     	; 0x346 <__fp_splitA+0xc>
 364:	86 95       	lsr	r24
 366:	71 05       	cpc	r23, r1
 368:	61 05       	cpc	r22, r1
 36a:	08 94       	sec
 36c:	08 95       	ret

0000036e <__fp_zero>:
 36e:	e8 94       	clt

00000370 <__fp_szero>:
 370:	bb 27       	eor	r27, r27
 372:	66 27       	eor	r22, r22
 374:	77 27       	eor	r23, r23
 376:	cb 01       	movw	r24, r22
 378:	97 f9       	bld	r25, 7
 37a:	08 95       	ret

0000037c <__gesf2>:
 37c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__fp_cmp>
 380:	08 f4       	brcc	.+2      	; 0x384 <__gesf2+0x8>
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	08 95       	ret

00000386 <__mulsf3>:
 386:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__mulsf3x>
 38a:	0c 94 47 02 	jmp	0x48e	; 0x48e <__fp_round>
 38e:	0e 94 39 02 	call	0x472	; 0x472 <__fp_pscA>
 392:	38 f0       	brcs	.+14     	; 0x3a2 <__mulsf3+0x1c>
 394:	0e 94 40 02 	call	0x480	; 0x480 <__fp_pscB>
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__mulsf3+0x1c>
 39a:	95 23       	and	r25, r21
 39c:	11 f0       	breq	.+4      	; 0x3a2 <__mulsf3+0x1c>
 39e:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_inf>
 3a2:	0c 94 36 02 	jmp	0x46c	; 0x46c <__fp_nan>
 3a6:	11 24       	eor	r1, r1
 3a8:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_szero>

000003ac <__mulsf3x>:
 3ac:	0e 94 95 01 	call	0x32a	; 0x32a <__fp_split3>
 3b0:	70 f3       	brcs	.-36     	; 0x38e <__mulsf3+0x8>

000003b2 <__mulsf3_pse>:
 3b2:	95 9f       	mul	r25, r21
 3b4:	c1 f3       	breq	.-16     	; 0x3a6 <__mulsf3+0x20>
 3b6:	95 0f       	add	r25, r21
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	55 1f       	adc	r21, r21
 3bc:	62 9f       	mul	r22, r18
 3be:	f0 01       	movw	r30, r0
 3c0:	72 9f       	mul	r23, r18
 3c2:	bb 27       	eor	r27, r27
 3c4:	f0 0d       	add	r31, r0
 3c6:	b1 1d       	adc	r27, r1
 3c8:	63 9f       	mul	r22, r19
 3ca:	aa 27       	eor	r26, r26
 3cc:	f0 0d       	add	r31, r0
 3ce:	b1 1d       	adc	r27, r1
 3d0:	aa 1f       	adc	r26, r26
 3d2:	64 9f       	mul	r22, r20
 3d4:	66 27       	eor	r22, r22
 3d6:	b0 0d       	add	r27, r0
 3d8:	a1 1d       	adc	r26, r1
 3da:	66 1f       	adc	r22, r22
 3dc:	82 9f       	mul	r24, r18
 3de:	22 27       	eor	r18, r18
 3e0:	b0 0d       	add	r27, r0
 3e2:	a1 1d       	adc	r26, r1
 3e4:	62 1f       	adc	r22, r18
 3e6:	73 9f       	mul	r23, r19
 3e8:	b0 0d       	add	r27, r0
 3ea:	a1 1d       	adc	r26, r1
 3ec:	62 1f       	adc	r22, r18
 3ee:	83 9f       	mul	r24, r19
 3f0:	a0 0d       	add	r26, r0
 3f2:	61 1d       	adc	r22, r1
 3f4:	22 1f       	adc	r18, r18
 3f6:	74 9f       	mul	r23, r20
 3f8:	33 27       	eor	r19, r19
 3fa:	a0 0d       	add	r26, r0
 3fc:	61 1d       	adc	r22, r1
 3fe:	23 1f       	adc	r18, r19
 400:	84 9f       	mul	r24, r20
 402:	60 0d       	add	r22, r0
 404:	21 1d       	adc	r18, r1
 406:	82 2f       	mov	r24, r18
 408:	76 2f       	mov	r23, r22
 40a:	6a 2f       	mov	r22, r26
 40c:	11 24       	eor	r1, r1
 40e:	9f 57       	subi	r25, 0x7F	; 127
 410:	50 40       	sbci	r21, 0x00	; 0
 412:	9a f0       	brmi	.+38     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 414:	f1 f0       	breq	.+60     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 416:	88 23       	and	r24, r24
 418:	4a f0       	brmi	.+18     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	bb 1f       	adc	r27, r27
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	91 50       	subi	r25, 0x01	; 1
 428:	50 40       	sbci	r21, 0x00	; 0
 42a:	a9 f7       	brne	.-22     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 42c:	9e 3f       	cpi	r25, 0xFE	; 254
 42e:	51 05       	cpc	r21, r1
 430:	80 f0       	brcs	.+32     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 432:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_inf>
 436:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_szero>
 43a:	5f 3f       	cpi	r21, 0xFF	; 255
 43c:	e4 f3       	brlt	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	98 3e       	cpi	r25, 0xE8	; 232
 440:	d4 f3       	brlt	.-12     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 442:	86 95       	lsr	r24
 444:	77 95       	ror	r23
 446:	67 95       	ror	r22
 448:	b7 95       	ror	r27
 44a:	f7 95       	ror	r31
 44c:	e7 95       	ror	r30
 44e:	9f 5f       	subi	r25, 0xFF	; 255
 450:	c1 f7       	brne	.-16     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 452:	fe 2b       	or	r31, r30
 454:	88 0f       	add	r24, r24
 456:	91 1d       	adc	r25, r1
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	97 f9       	bld	r25, 7
 45e:	08 95       	ret

00000460 <__fp_inf>:
 460:	97 f9       	bld	r25, 7
 462:	9f 67       	ori	r25, 0x7F	; 127
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	08 95       	ret

0000046c <__fp_nan>:
 46c:	9f ef       	ldi	r25, 0xFF	; 255
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	08 95       	ret

00000472 <__fp_pscA>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	16 16       	cp	r1, r22
 478:	17 06       	cpc	r1, r23
 47a:	18 06       	cpc	r1, r24
 47c:	09 06       	cpc	r0, r25
 47e:	08 95       	ret

00000480 <__fp_pscB>:
 480:	00 24       	eor	r0, r0
 482:	0a 94       	dec	r0
 484:	12 16       	cp	r1, r18
 486:	13 06       	cpc	r1, r19
 488:	14 06       	cpc	r1, r20
 48a:	05 06       	cpc	r0, r21
 48c:	08 95       	ret

0000048e <__fp_round>:
 48e:	09 2e       	mov	r0, r25
 490:	03 94       	inc	r0
 492:	00 0c       	add	r0, r0
 494:	11 f4       	brne	.+4      	; 0x49a <__fp_round+0xc>
 496:	88 23       	and	r24, r24
 498:	52 f0       	brmi	.+20     	; 0x4ae <__fp_round+0x20>
 49a:	bb 0f       	add	r27, r27
 49c:	40 f4       	brcc	.+16     	; 0x4ae <__fp_round+0x20>
 49e:	bf 2b       	or	r27, r31
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__fp_round+0x18>
 4a2:	60 ff       	sbrs	r22, 0
 4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__fp_round+0x20>
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
